package com.client.client.services;

import java.util.Optional;

import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.transaction.annotation.Transactional;

import com.client.client.dto.ClientDTO;
import com.client.client.entities.Client;
import com.client.client.repositories.ClientRepository;
import com.project.catalog.catalog.services.exceptions.DataBaseException;
import com.project.catalog.catalog.services.exceptions.ResourceNotFoundExeption;

import jakarta.persistence.EntityNotFoundException;

public class ClientService {
	
	public ClientRepository repository;
	

	@Transactional(readOnly = true)
	public Page<ClientDTO> findAllPaged(PageRequest pageRequest) {
		Page<Client> list = repository.findAll(pageRequest);
		return list.map(x -> new ClientDTO(x));
	}

	@Transactional(readOnly = true)
	public ClientDTO findByid(Long id) {
		Optional<Client> obj = repository.findById(id);
		Client entity = obj.orElseThrow() -> new ResourceNotFoundExeption("Entity not Found");
		
		return new ClientDTO(entity);
	}
	
	@Transactional
	public ClientDTO insert(ClientDTO dto) {
		Client entity = new Client();
		entity.setName(dto.getName());
		entity = repository.save(entity);
		return new ClientDTO(entity);
	}

	@Transactional
	public ClientDTO update(Long id, ClientDTO dto) {
		try {
			Client entity = repository.getOne(id);
			entity.setName(dto.getName());
			entity = repository.save(entity);
			}
		catch (EntityNotFoundException e) {
			throw new ResourceNotFoundExeption ("Id not Found"+id);
			
		}
	}
	
	

	public void delete(Long id) {
		try {
			repository.deleteById(id);
		} catch (EmptyResultDataAccessException e) {
			throw new ResourceNotFoundExeption("Id not found" + id);
		} catch (DataIntegrityViolationException e) {
			throw new DataBaseException("Integrity violation");

		}

		
	}

}
